/**
* Class Name: <OrderLineItemVendorTriggerHandler>
* @author: <Rom Edison Reyes>
* Date: <3/27/2015>
* Requirement/Project Name: <SPH>
* @description <UD-0647: To restrict order line item (Vendor) fields from being updated based on Publication published days>
*/
public class OrderLineItemVendorTriggerHandler {
    
    List<String> lstPubDays = new List<String>();
    List<Id> listOfPubId = new List<Id>();
    List<Publication__c> lstPubs = new List<Publication__c>(); 
    Map<Id, Publication__c> publications = new Map<Id, Publication__c>();
    String errorMsg = '';
    
    //BeforeUpdate logic 
    public void doBeforeUpdate(List<Order_Line_Item_Vendor__c> lstNewOliVendor, Map<Id, Order_Line_Item_Vendor__c> mapNewOliVendor,
                               List<Order_Line_Item_Vendor__c> lstOldOliVendor, Map<Id, Order_Line_Item_Vendor__c> mapOldOliVendor)
    {    
        for(Order_Line_Item_Vendor__c newOli : lstNewOliVendor)
        {
            if(newOli.Publication__c != null)
            {
                listOfPubId.add(newOli.Publication__c); 
            }
        }
        
        if(listOfPubId.size() > 0)
        {
            lstPubs = [Select Id, Published_Days__c from Publication__c where Id in:listOfPubId];
            
            if(lstPubs.size() > 0)
            {
                for(Publication__c pubs: lstPubs)
                {
                    publications.put(pubs.id, pubs);
                }
                
                if(publications.size() > 0)
                {
                    for(Order_Line_Item_Vendor__c newOliVendor : lstNewOliVendor)
                    {
                        if(newOliVendor.Publication__c != null)
                        {
                            if(publications.containsKey(newOliVendor.Publication__c))
                            {  
                                String pubDay = publications.get(newOliVendor.Publication__c).Published_Days__c;
                                if(pubDay !='' || pubday!= null)
                                {
                                    lstPubDays = splitPublication(pubDay);
                                    errorMsg = checkError(newOliVendor, mapOldOliVendor.get(newOliVendor.Id), lstPubDays);
                                }
                                if(errorMsg != ' ' && errorMsg!= null){
                                    newOliVendor.addError(errorMsg);
                                }
                                else
                                {
                                    System.debug('>>No Error!' + errorMsg);
                                }
                            }
                        }
                    }
                }
            }
        } 
    }
    
    public List<String> splitPublication(String pubDays)
    {
        List<String> splitPubDays = new List<String>();
        splitPubDays = pubDays.split('');
        splitPubDays.remove(0);
        return splitPubDays;
    }
    
    public string checkError(Order_Line_Item_Vendor__c newOli, Order_Line_Item_Vendor__c oldOli, List<String> lstPubDays)
    {
        String error = ' ';
        Integer errorCount = 0;
        List<String> lstEditable = new List<String>();
        
        if(lstPubDays[0] == 'N'){
            if(newOli.Mon__c != oldOli.Mon__c){
                errorCount++;
            }
        }else{
            lstEditable.add('Mon');
        }
        
        if(lstPubDays[1] == 'N'){
            if(newOli.Tue__c != oldOli.Tue__c){
                errorCount++;
            }
        }else{
            lstEditable.add('Tue');
        }
        
        if(lstPubDays[2] == 'N'){
            if(newOli.Wed__c != oldOli.Wed__c){
                errorCount++;
            }
        }else{
            lstEditable.add('Wed');
        }
        
        if(lstPubDays[3] == 'N'){
            if(newOli.Thu__c != oldOli.Thu__c){
                errorCount++;
            }
        }else{
            lstEditable.add('Thu');
        }
        
        if(lstPubDays[4] == 'N'){
            if(newOli.Fri__c != oldOli.Fri__c){
                errorCount++;
            }
        }else{
            lstEditable.add('Fri');
        }
        
        if(lstPubDays[5] == 'N'){
            if(newOli.Sat__c != oldOli.Sat__c){
                errorCount++;
            }
        }else{
            lstEditable.add('Sat');
        }
        
        if(lstPubDays[6] == 'N'){
            if(newOli.Sun__c != oldOli.Sun__c){
                errorCount++;
            }
        }else{
            lstEditable.add('Sun');
        }
        
        if(errorCount > 0 && lstEditable.size() > 0)
        {
            error += 'You can only edit values for the following fields: ';
            for(Integer x = 0; x < lstEditable.size(); x++)
            {
                if(!(x == lstEditable.size() - 1))
                {
                    error += lstEditable[x] + ', ';
                }
                else
                {
                    error += lstEditable[x];
                }
            }
        }
        return error;
    }
    
    //Logic for AfterUpdate - Leave blank for not in use
    public void doAfterUpdate(List<Order_Line_Item_Vendor__c> lstNewOliVendor, Map<Id, Order_Line_Item_Vendor__c> mapNewOliVendor,
                              List<Order_Line_Item_Vendor__c> lstOldOliVendor, Map<Id, Order_Line_Item_Vendor__c> mapOldOliVendor)
    {}
    //Logic for BeforeInsert - Leave blank if not in use
    public void doBeforeInsert(List<Order_Line_Item_Vendor__c> lstNewOliVendor)
    {}
    
    //Logic for AfterInsert - Leave blank if not in use
    public void doAfterInsert(List<Order_Line_Item_Vendor__c> lstNewOliVendor, Map<Id, Order_Line_Item_Vendor__c> mapNewOliVendor)
    {}
    
    //Logic for BeforeDelete - Leave blank if not in use
    public void doBeforeDelete(List<Order_Line_Item_Vendor__c> lstOldOliVendor, Map<Id, Order_Line_Item_Vendor__c> mapOldOliVendor)
    {}    
    
    //Logic for BeforeDelete - Leave blank if not in use
    public void doAfterDelete(List<Order_Line_Item_Vendor__c> lstOldOliVendor, Map<Id, Order_Line_Item_Vendor__c> mapOldOliVendor)
    {}
    
}